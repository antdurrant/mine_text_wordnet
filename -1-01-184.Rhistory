virtualenv_list()
library(word.lists)
library(shiny)
library(reticulate)
library(udpipe)
library(pdftools)
library(qdapTools)
library(shinythemes)
library(tidyverse)
library(tesseract)
library(writexl)
virtualenv_list()
runApp()
runApp()
virtualenv_list()
runApp()
runApp()
load("~/OneDrive - JPREP/2020/tidytext/mine_text_wordnet/.RData")
View(ui)
shiny::runApp()
shiny::runApp()
runApp()
# # Create a virtual environment selecting your desired python version
#  virtualenv_create(envname = "python_environment", python= "python3")
# # # Explicitly install python libraries that you want to use, e.g. pandas, numpy
#  virtualenv_install("python_environment", packages = c("nltk"))
# # # Select the virtual environment
#  use_virtualenv("python_environment", required = TRUE)
#
# nltk <- reticulate::import("nltk")
# Create a virtual environment selecting your desired python version
virtualenv_create(envname = "python_environment", python= "python3")
# # Explicitly install python libraries that you want to use, e.g. pandas, numpy
virtualenv_install("python_environment", packages = c("nltk"))
# # Select the virtual environment
use_virtualenv("python_environment", required = TRUE)
nltk <- reticulate::import("nltk")
library(word.lists)
library(shiny)
library(reticulate)
library(udpipe)
library(pdftools)
library(qdapTools)
library(shinythemes)
library(tidyverse)
library(tesseract)
library(writexl)
# Create a virtual environment selecting your desired python version
virtualenv_create(envname = "python_environment", python= "python3")
# # Explicitly install python libraries that you want to use, e.g. pandas, numpy
virtualenv_install("python_environment", packages = c("nltk"))
# # Select the virtual environment
use_virtualenv("python_environment", required = TRUE)
nltk <- reticulate::import("nltk")
# Create a virtual environment selecting your desired python version
virtualenv_create(envname = "python_environment", python= "python3")
# # Explicitly install python libraries that you want to use, e.g. pandas, numpy
virtualenv_install("python_environment", packages = c("nltk"))
# # Select the virtual environment
use_virtualenv("python_environment", required = TRUE)
nltk <- reticulate::import("nltk")
library(word.lists)
library(shiny)
library(reticulate)
library(udpipe)
library(pdftools)
library(qdapTools)
library(shinythemes)
library(tidyverse)
library(tesseract)
library(writexl)
# Create a virtual environment selecting your desired python version
virtualenv_create(envname = "python_environment", python= "python3")
# # Explicitly install python libraries that you want to use, e.g. pandas, numpy
virtualenv_install("python_environment", packages = c("nltk"))
# # Select the virtual environment
use_virtualenv("python_environment", required = TRUE)
# # Select the virtual environment
use_virtualenv("python_environment")
nltk <- reticulate::import("nltk")
nltk$wordnet$wordnet$synsets
word.lists::get_translation
synsets <- nltk$wordnet$wordnet$synsets
runApp()
# Create a virtual environment selecting your desired python version
virtualenv_create(envname = "shiny_app_py", python= "python3")
nltk <- reticulate::import("nltk")
synsets <- nltk$wordnet$wordnet$synsets
nltk$download()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
get_wordlist()
get_wordlist
runApp()
udpipe::udpipe("word to your mother", object = "english"
)
udpipe::udpipe("word to your mother", object = "english") %>% get_wordlist()
udpipe::udpipe("word to your mother", object = "english") %>% get_wordlist(lagnuage = "fra")
udpipe::udpipe("word to your mother", object = "english") %>% get_wordlist(language = "fra")
remotes::install_github("antdurrant/word.lists")
udpipe::udpipe("word to your mother", object = "english") %>% word.lists::get_wordlist(language = "fra")
library(tidyverse)
remotes::install_github("antdurrant/word.lists")
udpipe::udpipe("word to your mother", object = "english") %>% get_wordlist(lagnuage = "fra")
udpipe::udpipe("word to your mother", object = "english") %>% get_wordlist(language = "fra")
udpipe::udpipe("word to your mother", object = "english") %>% word.lists::get_wordlist(language = "fra")
shiny::runApp()
udpipe::udpipe("word to your mother", object = "english") %>% word.lists::get_wordlist(language = "fra")
remotes::install_github("antdurrant/word.lists")
library(word.lists)
?checkBoxList
?checkboxList
??checkboxList
shiny::runApp()
runApp()
s
?selectInput
list_flemma <- tibble(path = list.files("./data-raw/list_flemma_50c", full.names = TRUE)) %>%
mutate(lemma = map(path, read_lines),
group = parse_number(str_extract(path, "\\d+\\).txt")),
on_list = "flemma") %>%
unnest(lemma)
length(list_flemma)
library(word.lists)
library(shiny)
library(reticulate)
library(udpipe)
library(pdftools)
library(qdapTools)
library(shinythemes)
library(tidyverse)
library(tesseract)
library(writexl)
length(list_flemma)
nrow(list_flemma)
list_exp <- read_csv("./ref/list_exp.csv")
list_exp <- read_csv("./ref/list_exp.csv")
View(list_exp)
# server logic ####
server <- function(input, output) {
# allow up to 50mb files
options(shiny.maxRequestSize = 50*1024^2)
# dynamic UI ####
# output file-type explanation ####
output$type_exp <- renderText({
case_when(
input$type_of_text == "pdf-digital" ~ "This will extract embedded text from digitally produced pdfs. Scans will come out with gibberish.",
input$type_of_text == "pdf-scan" ~ "This will attempt to extract text from your pdf using Tesseract's OCR engine. If the scan is not very clean, it will struggle. This will also take a long time; don't bother trying with files more than ~5 pages long.",
input$type_of_text == "ms-word" ~ "This will pull the text out of your Word file. It will not read any text in images in your file.",
input$type_of_text == "typed-text" ~ "This will use the text you type in the box.",
TRUE ~ "")
})
# output file-type ####
output$input_type <- renderUI({
req(input$type_of_text)
pdf_input <-  list(fileInput("pdf",
"Drag-and-drop or browse for your pdf",
accept = c(".pdf")
))
word_input <- list(fileInput("word",
"Drag-and-drop or browse for your Word file",
accept = c(".docx")
))
text_input <- list(textAreaInput("text",
"Type your text here:",
value = "See this tool in action.",
width = "100%",
height = "200px"
))
case_when(
input$type_of_text == "pdf-digital" ~ pdf_input,
input$type_of_text == "pdf-scan"    ~ pdf_input,
input$type_of_text == "ms-word"     ~ word_input,
input$type_of_text == "typed-text"  ~ text_input
)
})
# output select what to preview ####
output$select_preview_content <- renderUI({
selectInput("preview_doc_ids",
"Select which parts to preview",
choices = text()$doc_id,
multiple = TRUE,
selected = 1
)
})
# output include definitions? ####
output$include_definitions <- renderUI({
req(input$preview_doc_ids)
radioButtons("def",
"Include English definitions of terms?",
choices = c("Yes" = TRUE, "No" = FALSE),
inline = TRUE)
})
# output select language #####
output$select_language <- renderUI({
req(input$def)
selectInput("lang",
"Select language for translations",
selected = "jpn",
choices = c("English" = "eng",
"Finnish" = "fin",
"Thai" = "tha",
"French" = "fra",
"Japanese" = "jpn",
"Romanian" = "ron",
"Catalan" = "cat",
"Portuguese" = "por",
"Slovenian" = "slv",
"Chinese" = "cmn",
"Bahasa" = "ind",
"Polish" = "pol",
"Dutch" = "nld",
"Basque" = "eus",
"Hebrew" = "heb",
"Spanish" = "spa",
"Croatian" = "cro",
"Galician" = "glg",
"Greek" = "ell",
"Slovakian" = "slk",
"Persian" = "fas",
"Italian" = "ita",
"Arabic" = "arb",
"Swedish" = "swe",
"Hebrew" = "heb",
"Icelandic" = "isl",
"Danish" = "dan",
"Norwegian" = "nob",
"Bulgarian" = "bul",
"Taiwanese" = "qcn"
)
)
})
# output filename ####
output$filename <- renderUI({
req(input$lang)
textInput ("file_name",
label = NULL,
placeholder = "Name your file for download.")
})
# output download ####
output$dl <- renderUI({
req(input$lang)
downloadButton("download",
"Download Vocab File - rendering will take some time")
})
# output list explanation ####
output$filter_list <- renderText({
explanation <- function(wl = input$wordlist{
list_exp %>% filter(list == wl) %>% pull(exp)
}
case_when(
input$word_list == "NGSL" ~
)
})
# non-displayed reactives ####
text <- reactive({
withProgress( message = "processing" , {
if(input$type_of_text %in% c("pdf-digital", "pdf-scan")){
req(input$pdf$datapath)
if(input$type_of_text == "pdf-digital") {
tibble(text = pdftools::pdf_text(input$pdf$datapath)) %>%
mutate(doc_id = row_number(), .before = text)
} else if(input$type_of_text == "pdf-scan") {
a <- tibble(text = tesseract::ocr(input$pdf$datapath)) %>%
mutate(doc_id = row_number(), .before = text) %>%
mutate(text = str_replace_all(text, "|", "I"))
file.remove(list.files(pattern = "png"))
a
}
} else if(input$type_of_text == "ms-word") {
req(input$word$datapath)
tibble(text = qdapTools::read_docx(input$word$datapath)) %>%
mutate(doc_id = row_number(), .before = text)
} else if(input$type_of_text == "typed-text"){
req(input$text)
tibble(text = input$text) %>%
separate_rows(text, sep = "\n") %>%
mutate(doc_id = row_number(), .before = text)
}
})
})
#
piped <- reactive({
withProgress(
message = "processing...",
udpipe(text(), object = "english") %>%
get_wordlist(language = input$lang,
def = input$def) %>%
group_by(lemma) %>%
mutate(count_in_doc = row_number()) %>%
ungroup() %>%
select(-pos)
)
})
# output reactives ####
output$text_check <- renderTable({
head(text(), 2)
})
# output preview ####
output$preview_content <- renderDataTable({
req(nchar(input$lang) >=1)
text() %>%
filter(doc_id %in% input$preview_doc_ids) %>%
udpipe(object = "english") %>%
select(doc_id, sentence_id, token_id, token, lemma, upos) %>%
get_wordlist(language = input$lang,
def = input$def) %>%
select(-doc_id, -sentence_id, -token_id, -pos, -sentence)
},
options = list(
width = "100%",
filter = "top"
)
)
output$download <- downloadHandler(
filename = function() {
if (input$file_name != "" ) {
glue::glue("{input$file_name}_{format(Sys.time(), '%Y-%m-%d-%H%M%S')}.xlsx")
} else {
# auto-name the file as it was uploaded
glue::glue("vocab_output_{format(Sys.time(), '%Y-%m-%d-%H%M%S')}.xlsx")
}
},
content = function(file) {
# write excel workbook
write_xlsx(piped(), file)
}
)
}
runApp()
list_exp %>% filter(list == "NGSL") %>% pull(exp)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- "This is a simple test."
piped(a)
udpipe(a, object = "english") %>%
get_wordlist(language = input$lang,
def = input$def) %>%
group_by(lemma) %>%
mutate(count_in_doc = row_number()) %>%
ungroup() %>%
select(-pos)
udpipe(a, object = "english") %>%
get_wordlist(language = "jpn",
def = "no") %>%
group_by(lemma) %>%
mutate(count_in_doc = row_number()) %>%
ungroup() %>%
select(-pos)
udpipe(a, object = "english") %>%
get_wordlist(language = "jpn",
def = "no") %>%
group_by(lemma) %>%
mutate(count_in_doc = row_number()) %>%
ungroup() %>%
select(-pos)
runApp()
udpipe(a)
udpipe(a, object = "eng")
udpipe(a, object = "english")
get_wordlist\
get_wordlist
runApp()
runApp()
runApp()
runApp()
get_wordlist
runApp()
runApp()
runApp()
text_input <- list(
textAreaInput("text",
"Type your text here:",                                         value = "See this tool in action.",
width = "100%",
height = "200px"
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
word.lists::list_ngsl
word.lists::list_academic
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
word.lists::list_wiki
word.lists::list_ngsl_all
word.lists::list_business
word.lists::list_academic
runApp()
runApp()
runApp()
runApp()
runApp()
list_ngsl
runApp()
runApp()
runApp()
head(list_ngsl)
runApp()
head(list_ngsl)
runApp()
shinyAppTemplate(
)
shinyUI()
output$list_def <- renderTable({
case_when(
input$word_list == "NGSL"                          ~ head(list_ngsl),
input$word_list ==   "NGSL + NAWL (Academic)"      ~ word.lists::list_academic,
input$word_list == "NGSL + NBL (Business)"         ~ word.lists::list_business,
input$word_list == "NGSL + TOEIC"                  ~ word.lists::list_toeic,
input$word_list == "NGSL + NBL + NAWL + TOEIC"     ~ word.lists::list_general_plus,
input$word_list ==  "NGSL-35000"                   ~ word.lists::list_ngsl_all,
input$word_list == "Wikipedia-5000"                ~ word.lists::list_wiki,
input$word_list == "Flemma-5000"                   ~ word.lists::list_flemma,
input$word_list == "New Dolch List"                  ~ word.lists::list_dolch
)
})
shiny::runApp()
runApp()
runApp()
list_academic
list_ngsl
list_business
runApp()
runApp()
runApp()
runApp()
runApp()
ngsl_all
list_ngsl_all
word.lists::list_ngsl_all
runApp()
runApp()
runApp()
get_wordlist
runApp()
get_wordlist
runApp()
word.lists::list_ngsl
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(usethis)
use_git()
use_git()
use_github()
